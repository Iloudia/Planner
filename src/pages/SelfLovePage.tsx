import type { ChangeEvent, FormEvent } from 'react'
import { useEffect, useMemo, useState } from 'react'
import usePersistentState from '../hooks/usePersistentState'

type SelfLovePhotoSlot = {
  id: string
  dataUrl: string | null
}

type SelfLoveQuality = {
  id: string
  text: string
}

type SelfLoveThought = {
  id: string
  text: string
}

type SelfLoveJournalEntry = {
  id: string
  text: string
  createdAt: string
}

type SelfLoveState = {
  certificatePhoto: string | null
  photos: SelfLovePhotoSlot[]
  qualities: SelfLoveQuality[]
  thoughts: SelfLoveThought[]
  journal: SelfLoveJournalEntry[]
}

const PHOTO_SLOT_COUNT = 6

const createDefaultState = (): SelfLoveState => ({
  certificatePhoto: null,
  photos: Array.from({ length: PHOTO_SLOT_COUNT }, (_, index) => ({
    id: `photo-${index}`,
    dataUrl: null,
  })),
  qualities: [
    { id: 'quality-1', text: 'Mon sourire illumine les gens.' },
    { id: 'quality-2', text: "J'ai une force tranquille." },
    { id: 'quality-3', text: 'Je sais √©couter avec le c≈ìur.' },
  ],
  thoughts: [
    { id: 'thought-1', text: 'Je ne suis pas assez.' },
    { id: 'thought-2', text: 'Je dois tout contr√¥ler.' },
    { id: 'thought-3', text: "Je ne m√©rite pas ce que j'ai." },
  ],
  journal: [],
})

const affirmations = [
  "Je m'offre la m√™me douceur que je donne aux autres.",
  'Je suis d√©j√† assez et je le reste √† chaque souffle.',
  'Ma pr√©sence est un cadeau pour ce monde.',
  "Je choisis de me regarder avec de l'amour aujourd'hui.",
  'Je laisse ma lumi√®re briller sans me cacher.',
  'Je suis digne de tendresse, de joie et de paix.',
]

const inspiringQuotes = [
  '"S‚Äôaimer soi-m√™me est le d√©but d‚Äôune histoire d‚Äôamour qui dure toute la vie." ‚Äî Oscar Wilde',
  '"Tu es ton propre refuge. Tu es ton propre soleil."',
  '"Tu es le r√©sultat de l‚Äôamour de toutes les femmes qui t‚Äôont pr√©c√©d√©e."',
  '"N‚Äôoublie pas de t‚Äô√©merveiller de ta force douce."',
  '"Tu es une ≈ìuvre en mouvement, magnifique √† chaque √©tape."',
]

const STORAGE_KEY = 'planner.selfLove'

const formatDate = (value: string) => {
  const date = new Date(value)
  return date.toLocaleDateString('fr-FR', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  })
}

const SelfLovePage = () => {
  const [state, setState] = usePersistentState<SelfLoveState>(STORAGE_KEY, createDefaultState)
  const [qualityDraft, setQualityDraft] = useState('')
  const [thoughtDraft, setThoughtDraft] = useState('')
  const [journalDraft, setJournalDraft] = useState('')
  const [releasingThoughtIds, setReleasingThoughtIds] = useState<Set<string>>(new Set())

  useEffect(() => {
    document.body.classList.add('self-love-page--gradient')
    return () => document.body.classList.remove('self-love-page--gradient')
  }, [])

  const certificateImage = useMemo(() => {
    if (state.certificatePhoto) {
      return state.certificatePhoto
    }
    return state.photos.find((photo) => photo.dataUrl)?.dataUrl ?? null
  }, [state.certificatePhoto, state.photos])

  const affirmationOfDay = useMemo(() => {
    const todayKey = new Date().toISOString().slice(0, 10)
    const hash = todayKey
      .split('')
      .reduce((accumulator, character) => accumulator + character.charCodeAt(0), 0)
    return affirmations[hash % affirmations.length]
  }, [])

  const quoteOfDay = useMemo(() => {
    const todayKey = new Date().toISOString().slice(0, 10)
    const hash = todayKey
      .split('')
      .reverse()
      .reduce((accumulator, character) => accumulator + character.charCodeAt(0), 0)
    return inspiringQuotes[hash % inspiringQuotes.length]
  }, [])

  const handlePhotoChange = (slotId: string, event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) {
      return
    }

    const reader = new FileReader()
    reader.onload = () => {
      const result = typeof reader.result === 'string' ? reader.result : null
      setState((previous) => ({
        ...previous,
        photos: previous.photos.map((photo) =>
          photo.id === slotId ? { ...photo, dataUrl: result } : photo,
        ),
      }))
    }
    reader.readAsDataURL(file)
  }

  const handleClearPhoto = (slotId: string) => {
    setState((previous) => ({
      ...previous,
      photos: previous.photos.map((photo) =>
        photo.id === slotId ? { ...photo, dataUrl: null } : photo,
      ),
    }))
  }

  const handleAddQuality = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const trimmed = qualityDraft.trim()
    if (trimmed.length === 0) {
      return
    }
    setState((previous) => ({
      ...previous,
      qualities: [{ id: `quality-${Date.now()}`, text: trimmed }, ...previous.qualities],
    }))
    setQualityDraft('')
  }

  const handleRemoveQuality = (qualityId: string) => {
    setState((previous) => ({
      ...previous,
      qualities: previous.qualities.filter((quality) => quality.id !== qualityId),
    }))
  }

  const handleAddThought = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const trimmed = thoughtDraft.trim()
    if (trimmed.length === 0) {
      return
    }
    setState((previous) => ({
      ...previous,
      thoughts: [...previous.thoughts, { id: `thought-${Date.now()}`, text: trimmed }],
    }))
    setThoughtDraft('')
  }

  const handleReleaseThought = (thoughtId: string) => {
    setReleasingThoughtIds((previous) => new Set(previous).add(thoughtId))
    window.setTimeout(() => {
      setState((previous) => ({
        ...previous,
        thoughts: previous.thoughts.filter((thought) => thought.id !== thoughtId),
      }))
      setReleasingThoughtIds((previous) => {
        const next = new Set(previous)
        next.delete(thoughtId)
        return next
      })
    }, 620)
  }

  const handleAddJournalEntry = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const trimmed = journalDraft.trim()
    if (trimmed.length === 0) {
      return
    }
    const entry: SelfLoveJournalEntry = {
      id: `entry-${Date.now()}`,
      text: trimmed,
      createdAt: new Date().toISOString(),
    }
    setState((previous) => ({
      ...previous,
      journal: [entry, ...previous.journal].slice(0, 12),
    }))
    setJournalDraft('')
  }

  const handleCertificatePhotoChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) {
      return
    }
    const reader = new FileReader()
    reader.onload = () => {
      const result = typeof reader.result === 'string' ? reader.result : null
      setState((previous) => ({ ...previous, certificatePhoto: result }))
    }
    reader.readAsDataURL(file)
  }

  const handleClearCertificatePhoto = () => {
    setState((previous) => ({ ...previous, certificatePhoto: null }))
  }

  const handleShareCertificate = async () => {
    const qualities = state.qualities.map((quality) => `‚Ä¢ ${quality.text}`).join('\n')
    const shareText = [
      '‚ú® Certificat de pure beaut√© ‚ú®',
      '',
      'Je c√©l√®bre la personne que je suis :',
      qualities.length > 0 ? qualities : "‚Ä¢ Je m'aime pour qui je suis.",
      '',
      affirmationOfDay,
    ]
      .filter(Boolean)
      .join('\n')

    try {
      await navigator.clipboard.writeText(shareText)
      window.alert('Ton certificat a √©t√© copi√©. Partage-le avec amour !')
    } catch (error) {
      console.error('Clipboard share failed', error)
      window.prompt('Copie ton certificat :', shareText)
    }
  }

  return (
    <div className="self-love-page">
      <header className="self-love-hero">
        <div className="self-love-hero__copy">
          <span className="self-love-hero__eyebrow">moment douceur</span>
          <h1>S'aimer soi-m√™me</h1>
          <p>Tu es d√©j√† assez. Prends un moment pour te c√©l√©brer.</p>
        </div>
        <div className="self-love-hero__glow" aria-hidden="true" />
      </header>

      <section className="self-love-section self-love-section--photos">
        <div className="self-love-section__header">
          <h2>Aime-toi !</h2>
          <p>Aime-toi ! Regarde-toi avec bienveillance et choisis six souvenirs o√π tu rayonnes.</p>
        </div>
        <div className="self-love-photos-frame">
          <div className="self-love-photos">
            {state.photos.map((photo, index) => (
              <div key={photo.id} className="self-love-photo-card">
                <label className="self-love-photo-card__drop">
                  {photo.dataUrl ? (
                    <img src={photo.dataUrl} alt={`Souvenir ${index + 1}`} />
                  ) : (
                    <span className="self-love-photo-card__placeholder">
                      <span role="img" aria-label="mirror">
                        ü™û
                      </span>
                      Souvenir {index + 1}
                    </span>
                  )}
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(event) => handlePhotoChange(photo.id, event)}
                  />
                </label>
                {photo.dataUrl ? (
                  <button type="button" onClick={() => handleClearPhoto(photo.id)}>
                    Changer la photo
                  </button>
                ) : (
                  <span className="self-love-photo-card__hint">Ajoute un souvenir lumineux</span>
                )}
              </div>
            ))}
          </div>
        </div>
      </section>

      <section className="self-love-section self-love-section--qualities">
        <div className="self-love-section__header">
          <h2>Ce que j'aime chez moi</h2>
          <p>Note tes qualit√©s, tes victoires, tout ce qui te rend fi√®re.</p>
        </div>
        <form className="self-love-form-row" onSubmit={handleAddQuality}>
          <input
            type="text"
            placeholder="Ajoute une qualit√© qui te rend fi√®re"
            value={qualityDraft}
            onChange={(event) => setQualityDraft(event.target.value)}
          />
          <button type="submit">+ Ajouter une qualit√©</button>
        </form>
        <ul className="self-love-list">
          {state.qualities.map((quality) => (
            <li key={quality.id}>
              <span>{quality.text}</span>
              <button type="button" onClick={() => handleRemoveQuality(quality.id)}>
                Retirer
              </button>
            </li>
          ))}
          {state.qualities.length === 0 ? (
            <li className="self-love-list__empty">
              Commence par noter une seule phrase douce. Le reste suivra.
            </li>
          ) : null}
        </ul>
      </section>

      <section className="self-love-section self-love-section--thoughts">
        <div className="self-love-section__header">
          <h2>Pens√©es n√©gatives √† oublier</h2>
          <p>Clique sur une pens√©e pour la laisser s'envoler.</p>
        </div>
        <form className="self-love-form-row" onSubmit={handleAddThought}>
          <input
            type="text"
            placeholder="Ex. Je dois √™tre parfait¬∑e."
            value={thoughtDraft}
            onChange={(event) => setThoughtDraft(event.target.value)}
          />
          <button type="submit">Ajouter</button>
        </form>
        <div className="self-love-thoughts">
          {state.thoughts.map((thought) => {
            const releasing = releasingThoughtIds.has(thought.id)
            return (
              <button
                type="button"
                key={thought.id}
                className={
                  releasing ? 'self-love-thought self-love-thought--releasing' : 'self-love-thought'
                }
                onClick={() => handleReleaseThought(thought.id)}
              >
                <span>{thought.text}</span>
                <em>Clique pour la dissoudre</em>
              </button>
            )
          })}
          {state.thoughts.length === 0 ? (
            <div className="self-love-thought self-love-thought--empty">
              <span>Plus aucune pens√©e limitante ici. Bravo !</span>
            </div>
          ) : null}
        </div>
      </section>

      <section className="self-love-section self-love-section--extras">
        <div className="self-love-extras">
          <article className="self-love-card self-love-card--affirmation">
            <h3>Affirmation du jour</h3>
            <p>{affirmationOfDay}</p>
          </article>
          <article className="self-love-card self-love-card--quote">
            <h3>Inspiration</h3>
            <p>{quoteOfDay}</p>
          </article>
          <article className="self-love-card self-love-card--journal">
            <h3>Journal d'amour-propre</h3>
            <form onSubmit={handleAddJournalEntry}>
              <textarea
                rows={3}
                placeholder="√âcris une phrase de gratitude envers toi-m√™me..."
                value={journalDraft}
                onChange={(event) => setJournalDraft(event.target.value)}
              />
              <button type="submit">Ajouter</button>
            </form>
            <ul>
              {state.journal.map((entry) => (
                <li key={entry.id}>
                  <span>{formatDate(entry.createdAt)}</span>
                  <p>{entry.text}</p>
                </li>
              ))}
              {state.journal.length === 0 ? (
                <li className="self-love-card__empty">√âcris ta premi√®re lettre d'amour.</li>
              ) : null}
            </ul>
          </article>
          <article className="self-love-card self-love-card--music">
            <h3>Ambiance bien-√™tre</h3>
            <p>Laisse cette playlist t'accompagner dans ta bulle de douceur.</p>
            <iframe
              title="Playlist bien-√™tre"
              src="https://open.spotify.com/embed/playlist/37i9dQZF1DX3rxVfibe1L0?utm_source=generator"
              width="100%"
              height="152"
              frameBorder="0"
              allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
              loading="lazy"
            />
          </article>
        </div>
      </section>

      <section className="self-love-section self-love-section--certificate">
        <div className="self-love-certificate">
          <h2>‚ú® Certifi√©e Pure Beaut√© ‚ú®</h2>
          <p className="self-love-certificate__subtitle">
            Savoure ton √©clat. Cette image est ton rappel que tu es d√©j√† assez.
          </p>
          <div className="self-love-certificate__canvas">
            {certificateImage ? (
              <img src={certificateImage} alt="Portrait c√©l√©br√©" />
            ) : (
              <div className="self-love-certificate__placeholder">
                <span role="img" aria-label="sparkles">
                  ‚ú®
                </span>
                <p>Ajoute une photo pour rayonner en grand.</p>
              </div>
            )}
          </div>
          <div className="self-love-certificate__controls">
            <label className="self-love-certificate__upload">
              <input type="file" accept="image/*" onChange={handleCertificatePhotoChange} />
              <span>Choisir une photo</span>
            </label>
            {state.certificatePhoto ? (
              <button type="button" onClick={handleClearCertificatePhoto}>
                Retirer
              </button>
            ) : null}
          </div>
          <button type="button" className="self-love-certificate__share" onClick={handleShareCertificate}>
            Partager mon certificat d'amour de soi
          </button>
        </div>
      </section>
    </div>
  )
}

export default SelfLovePage
